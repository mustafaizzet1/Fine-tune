# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13NTKJfdQfivKpAu5lR_kczY9xohWQs26
"""

pip install unsloth

pip install datasets trl bitsandbytes peft accelerate

from unsloth import FastLanguageModel
from transformers import AutoTokenizer

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "Trendyol/Trendyol-LLM-7B-chat-v4.1.0",
    max_seq_length = 2048,
    dtype = None,
    load_in_4bit = True,
)

from datasets import load_dataset

# Veri setini yükle
dataset = load_dataset("json", data_files="/content/chat_formatted_data3.jsonl", split="train")

# messages listesini system/user/assistant alanlarına ayır
def split_messages(example):
    roles = {msg["role"]: msg["content"] for msg in example["messages"]}
    return {
        "system": roles.get("system", ""),
        "user": roles.get("user", ""),
        "assistant": roles.get("assistant", "")
    }

dataset = dataset.map(split_messages)

# Alpaca-style prompt formatına dönüştür
alpaca_prompt = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### system:
{}

### Input:
{}

### Response:
{}"""

EOS_TOKEN = tokenizer.eos_token

def formatting_prompts_func(examples):
    instructions = examples["system"]
    inputs       = examples["user"]
    outputs      = examples["assistant"]
    texts = []
    for instruction, input, output in zip(instructions, inputs, outputs):
        text = alpaca_prompt.format(instruction, input, output) + EOS_TOKEN
        texts.append(text)
    return { "text": texts }

dataset = dataset.map(formatting_prompts_func, batched=True)

dataset[0]["messages"]
tokenizer.apply_chat_template(dataset[0]["messages"], tokenize=False)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

from pprint import pprint
pprint(dataset[0])

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = 2048,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "trendyol",
        report_to = "wandb", # Use this for WandB etc
    ),
)

trainer_stats = trainer.train()

trainer.model.save_pretrained("outputs/trendyol_model")
tokenizer.save_pretrained("outputs/trendyol_model")

from transformers import pipeline

pipe = pipeline("text-generation", model=trainer.model, tokenizer=tokenizer)

prompt = tokenizer.apply_chat_template([
    {"role": "user", "content": "Aşağıdaki soruyu yanıtlayın.\n\n karşı komsumu bıcaklasam kac yıl  yatarım ?"}
], tokenize=False, add_generation_prompt=True)

output = pipe(prompt, max_new_tokens=256)[0]["generated_text"]
print(output)
